@page "/api/Disponibilidad/crear"
@using ProyectoOptica.Shared.DTO
@inject IHttpServicio http
@inject NavigationManager navigationManager

<h3>Crear Nueva Disponibilidad</h3>

<EditForm Model="disponibilidad" OnValidSubmit="Grabar">
    <DataAnnotationsValidator />

    <!-- Campo para OptometristaId -->
    <div class="form-group">
        <label>Optometrista ID</label>
        <InputNumber class="form-control" @bind-Value="@disponibilidad.OptometristaId" />
        <ValidationMessage For="@(() => disponibilidad.OptometristaId)" />
    </div>

    <div class="form-group">
        <label>Disponibilidad ID</label>
        <InputNumber class="form-control" @bind-Value="@disponibilidad.IdDisponibilidad" />
        <ValidationMessage For="@(() => disponibilidad.IdDisponibilidad)" />
    </div>

    <div class="form-group">
        <label>Fecha de Disponibilidad</label>
        <InputDate class="form-control" @bind-Value="@disponibilidad.FechaDisponibilidad" />
        <ValidationMessage For="@(() => disponibilidad.FechaDisponibilidad)" />
    </div>

    <div class="form-group">
        <label>Hora Disponible</label>
        <InputText class="form-control" @bind-Value="HoraDisponible" />
        <ValidationMessage For="@(() => HoraDisponible)" />
    </div>

    <button class="btn btn-primary" type="submit">Aceptar</button>
    <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
</EditForm>

@code {
    private CrearDisponibilidadDTO disponibilidad = new CrearDisponibilidadDTO();

    // Propiedad para enlazar al InputText (Hora Disponible)
    private string HoraDisponible
    {
        get => MiTimeSpan.ToString(@"hh\:mm"); // Convierte TimeSpan a formato de hora
        set
        {
            if (!string.IsNullOrEmpty(value))
            {
                if (TimeSpan.TryParse(value, out var timeSpan))
                {
                    MiTimeSpan = timeSpan;
                }
            }
        }
    }

    private TimeSpan MiTimeSpan { get; set; }

    // Método para guardar la disponibilidad
    private async Task Grabar()
    {
        if (disponibilidad.FechaDisponibilidad == DateTime.MinValue)
        {
            Console.WriteLine("La fecha de disponibilidad es inválida.");
            return;
        }

        if (MiTimeSpan == TimeSpan.Zero)
        {
            Console.WriteLine("La hora disponible no puede ser 00:00.");
            return;
        }

        disponibilidad.HoraDisponible = MiTimeSpan; // Asignar el TimeSpan al modelo

        var httpRespuesta = await http.Post<CrearDisponibilidadDTO>("api/Disponibilidad", disponibilidad);
        if (httpRespuesta.Error)
        {
            Console.WriteLine($"Error: {httpRespuesta.HttpResponseMessage}");
        }
        else
        {
            navigationManager.NavigateTo("/api/Disponibilidad");
        }
    }

    // Método para cancelar y regresar a la lista de disponibilidades
    private void Cancelar()
    {
        navigationManager.NavigateTo("/api/Disponibilidad");
    }
}
