  @page "/api/Cita"
@inject IHttpServicio http
@using ProyectoOptica.BD.Data.Entity


<h3>Lista de citas</h3>

<br />
<a class ="btn btn-primary" href="/api/cita/crear">Nueva Cita</a>
<br />

<br />
<table>
    <tr>
        <th>Cliente</th>
        <th>Disponibilidad</th>
        <th>Fecha</th>
        <th>Hora</th>
    </tr>
    @if (Mensaje == "")
    {
      @if (listaCitas == null)
      {
        <p>Buscando....</p>
      }
      else if (listaCitas.Count == 0)
      {
        <p>No existen citas</p>
      }

      else
      {
            @foreach (var item in listaCitas)
                {
                    <tr>
                        <td>@item.Clientes</td>
                        <td>@item.Disponibilidades</td>
                        <td>@item.FechaDisponibilidad</td>
                        <td>@item.HoraDisponible</td>
                           <a class="btn btn-primary"
                               href="api/Cita/editar/@item.Id">
                            Editar
                           </a>
                        <td>
              <button class="btn btn-danger"
                   @onclick = "()=>Eliminar(item)">
                       Borrar
                     </button>
                    </td>
                </tr>
            }
        }
    }
    else
    {
        <p> Error: @Mensaje</p>
    }

</table>

    
    <Confirmacion @ref="confirmacion"
                  Titulo="CUIDADO"
                  textCancelar="Salir"
                  onCancel="Cancelar"
                  onConfirm="Borrar">
        <h5>Está por borrar el tipo de documento</h5>
        <br />
        <p>Está seguro?</p>
    </Confirmacion>


    @code {
    Confirmacion confirmacion;

        List<Cita> listaCitas;
        Cita cita;
        string Mensaje = "";

        Cita? citaBorrar = null;

        protected override async Task OnInitializedAsync()
        {
            await base.OnInitializedAsync();
            await Leer();
        }

        private async Task Leer()
        {
            var resp = await http.Get<List<Cita>>("/api/Cita");
            if (!resp.Error)
            {
                listaCitas = resp.Respuesta;
            }
            else
            {
                Mensaje = await resp.ObtenerError();
            }
        }

        private async Task Eliminar(Cita cita)
        {
            citaBorrar = cita;
            confirmacion.Ver();
        }

        private void Cancelar()
        {
            confirmacion.Ocultar();
            citaBorrar = null;
        }

        private async Task Borrar()
        {
            var respuesta = await http.Delete($"api/Cita/{citaBorrar.Id}");
            if (respuesta.Error)
            {
                var body = "No se pudo borrar";
            }
            Cancelar();
            await Leer();
        }

    }
 